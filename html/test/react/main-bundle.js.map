{"version":3,"sources":["webpack:///webpack/bootstrap f1f012d9aecab44894cc","webpack:///./html/test/react/like.jsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./html/test/react/list.jsx"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;;;;AACA;;;;;;;;;;;;KAEM;;;;;AAEL,WAFK,UAEL,CAAY,KAAZ,EAAmB;yBAFd,YAEc;;sEAFd,uBAGE,QADY;;AAElB,SAAK,KAAL,GAAa;AACZ,WAAO,MAAK,KAAL,CAAW,KAAX;IADR,CAFkB;;GAAnB;;;;;eAFK;;+BAUO,OAAO,OAAO;;;AAGzB,SAAK,QAAL,CAAc;AACb,YAAO,CAAC,KAAK,KAAL,CAAW,KAAX;KADT,EAHyB;;;;;;;;4BAUjB;AACR,QAAM,OAAO,KAAK,KAAL,CAAW,KAAX,GAAmB,OAAnB,GAA6B,gBAA7B,CADL;AAER,WACC;;OAAG,SAAS,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,EAA4B,MAA5B,CAAT,EAAH;;KACM,IADN;;KADD,CAFQ;;;;;;;;;;;;wCAeY;AACpB,QAAM,OAAO,IAAP;;;;;;AADc;;;;;;;uCAWD;AACnB,YAAQ,GAAR,CAAY,2BAAY,IAAZ,CAAZ;;AADmB;;;SA9Cf;;;;;;AAqDN,YAAW,YAAX,GAA0B;AACzB,SAAO,KAAP;EADD;;;;AAMA,uBACC,8BAAC,UAAD,OADD,EAEC,SAAS,cAAT,CAAwB,SAAxB,CAFD,E;;;;;;;;;AClEA,wB;;;;;;;;;ACAA,2B;;;;;;;;;;;ACAA;;;;AACA;;;;;AAGA,KAAM,gBAAgB,SAAhB,aAAgB,CAAC,KAAD;SAAW;;;GAAK,MAAM,IAAN;;EAAhB;;;AAGtB,KAAM,YAAY,SAAZ,SAAY,CAAC,KAAD,EAAW;AAC5B,SACC;;;GACE,MAAM,IAAN,CAAW,GAAX,CAAe,UAAS,IAAT,EAAe;AAC9B,WAAO,8BAAC,aAAD,IAAe,MAAM,IAAN,EAAY,KAAK,IAAL,EAA3B,CAAP,CAD8B;IAAf,CADjB;GADD,CAD4B;EAAX;;AAUlB,KAAM,OAAO,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAAP;;;AAGN,uBACC,8BAAC,SAAD,IAAW,MAAM,IAAN,EAAX,CADD,EAEC,SAAS,cAAT,CAAwB,MAAxB,CAFD,E","file":"./html/test/react/main-bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f1f012d9aecab44894cc\n **/","//\r\n// ECMAScript 2015 (ES6) syntax\r\n//==================================================================\r\n\r\nimport React, { Component } from 'react';\r\nimport { render, findDOMNode } from 'react-dom';\r\n\r\nclass LikeButton extends Component {\r\n\t// 初始化 this.state 的值，只在组件装载之前调用一次\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tliked: this.props.liked\r\n\t\t};\r\n\t}\r\n\r\n\t// 点击事件，注意这里的 event 是一个 SyntheticMouseEvent，不是原生的 onclick 事件\r\n\thandleClick(param, event) {\r\n\t\t// console.log(param);\r\n\t\t// console.log(event);\r\n\t\tthis.setState({\r\n\t\t\tliked: !this.state.liked\r\n\t\t});\r\n\t}\r\n\t\r\n\t// Virtual DOM，它返回一个 LikeButton 组件的实例，并不是一个真正的 DOM 结构\r\n\t// 这样可以避免直接输出 HTML 串可能遭受的 XXS 攻击\r\n\trender() {\r\n\t\tconst text = this.state.liked ? 'liked' : 'haven\\'t liked';\r\n\t\treturn (\r\n\t\t\t<p onClick={this.handleClick.bind(this, 'hehe')}>\r\n\t\t\t\tYou {text} this. Click to toggle.\r\n\t\t\t</p>\r\n\t\t);\r\n\t}\r\n\r\n\t//\r\n\t// 生命周期函数\r\n\t//==================================================================\r\n\r\n\t// 只会在装载之前调用一次，在 render 之前调用\r\n\t// 你可以在这个方法里面调用 setState 改变状态，并且不会导致额外调用一次 render\r\n\tcomponentWillMount() {\r\n\t\tconst that = this;\r\n\t\t// setTimeout(function() {\r\n\t\t// \tthat.setState({\r\n\t\t// \t\tliked: true\r\n\t\t// \t});\r\n\t\t// }, 2000);\r\n\t}\r\n\r\n\t// 只会在装载完成之后调用一次，在 render 之后调用\r\n\t// 从这里开始可以通过 react-dom 的 findDOMNode(this) 获取到组件的 DOM 节点\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(findDOMNode(this));\r\n\t\t// console.log(findDOMNode(this).innerText);\r\n\t}\r\n}\r\n\r\n// 组件默认属性\r\nLikeButton.defaultProps = {\r\n\tliked: false\r\n};\r\n\r\n// 渲染实例化后的组件，将其注入到相应的 DOM 节点中去（第二个参数）\r\n// 该方法只能在组件定义后被调用一次\r\nrender(\r\n\t<LikeButton />,\r\n\tdocument.getElementById('example')\r\n);\n\n\n/** WEBPACK FOOTER **\n ** ./html/test/react/like.jsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 3\n ** module chunks = 0\n **/","import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\n// 列表项\r\nconst BlackListItem = (props) => <li>{props.name}</li>;\r\n\r\n// 列表\r\nconst BlackList = (props) => {\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{props.list.map(function(item) {\r\n\t\t\t\treturn <BlackListItem name={item} key={item} />\r\n\t\t\t})}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nconst LIST = ['Kitty', 'Polly', 'Beast', 'Ducky'];\r\n\r\n// 渲染至 DOM\r\nrender(\r\n\t<BlackList list={LIST} />,\r\n\tdocument.getElementById('list')\r\n);\n\n\n/** WEBPACK FOOTER **\n ** ./html/test/react/list.jsx\n **/"],"sourceRoot":""}